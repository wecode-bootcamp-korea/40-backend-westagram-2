const { DataSource } = require("typeorm");
const bcrypt = require("bcrypt");
const jwt = require('jsonwebtoken');

const appDataSource = new DataSource({
    type : process.env.TYPEORM_CONNECTION,
    host : process.env.TYPEORM_HOST,
    port : process.env.TYPEORM_PORT,
    username : process.env.TYPEORM_USERNAME,
    password : process.env.TYPEORM_PASSWORD,
    database : process.env.TYPEORM_DATABASE
});

appDataSource.initialize()
    .then(() => {
        console.log("Data Source has been initialized.");
    })
    .catch((err) => {
        console.error("Error occured during Data Source initialization.", err);
            appDataSource.destroy();
    });

const createUser = async (name, email, password, profileImage) => {
    try{
        const DEFAULT_SALT_ROUNDS = 12;
        const hashedPassword = await bcrypt.hash(password, DEFAULT_SALT_ROUNDS);

        return await appDataSource.query(
            `INSERT INTO users(
                name,
                email,
                profile_image,
                password            
            ) VALUES ( ?, ?, ?, ? )
            `,
            [ name, email, profileImage, hashedPassword ]
        );
    } catch (err) {
        const error = new Error('INVALID_DATA_INPUT');
        error.statusCode = 500;
        throw error;
    }
};

const loginUser = async (email, password) => {
    try{
        const hashedPassword = await appDataSource.query(
            `SELECT password FROM users WHERE email = "${email}"`
        );

        const payLoad = { 
            email : email
        };
        
        const verified = await bcrypt.compare(password, hashedPassword[0].password);
        try {
            if (verified) {
                return accessToken = jwt.sign(payLoad, process.env.ACCESS_TOKEN_SECRET);
            };
        } catch (err) {
            const error = new Error('INVALID_VERIFICATION');
            error.statusCode = 500;
            throw error;
        }
    } catch (err) {
        const error = new Error('INVALID_DATA_INPUT');
        error.statusCode = 500;
        throw error;
    }
};

module.exports = {
    createUser,
    loginUser
}